<!DOCTYPE html>
<html lang="{{ str_replace('_', '-', app()->getLocale()) }}">
<head>
    <meta charset="utf-8">
    <meta name="viewport" content="width=device-width, initial-scale=1">
    <title>Movie Review</title>

    <link rel="preconnect" href="https://fonts.bunny.net">
    <script src="https://cdn.tailwindcss.com"></script>
    <link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/6.0.0-beta3/css/all.min.css" />
    <script src="https://cdn.jsdelivr.net/npm/sweetalert2@11"></script>

</head>

<body class="bg-gradient-to-b from-black to-gray-950 text-white">
    <%- include('partials/navbar') %>

    <div class="relative w-full py-8" style="
        background: linear-gradient(rgba(0, 0, 0, 0.9), rgba(0, 0, 0, 0.9)), url('<%= movie.image_url%>');
        background-size: cover;
        background-position: start;
        background-repeat: no-repeat;
        min-height: 100vh;">
                <%- include('partials/categories.ejs')%>

        <div class="w-full max-w-7xl mx-auto" id="movie-container" data-movie-id="<%= movie.id %>">
            <div class="flex justify-between items-center w-full pb-4 border-b border-gray-700 mb-6">
                <h1 class="text-3xl font-bold text-center text-yellow-400 mb-2"><%= movie.title %></h1>
                <div class="flex items-center gap-4">
                    <p class="text-lg"><%= movie.release_year%></p>/
                    <p class="text-lg"><% var hours=Math.floor(movie.duration / 60); var minutes=movie.duration % 60; %>
                        <%= hours + "h " + minutes + "m" %></p>
                </div>
            </div>
            
            <div class="flex gap-8 justify-between mb-12">
                <div class="w-1/4 flex flex-col gap-4">
                    <img src="<%= movie.image_url%>"
                        alt="Movie Poster" class="w-full rounded-lg shadow-xl transition-transform duration-300 hover:scale-105">
                    <div class="flex flex-col items-start gap-4 w-full">
                        <div class="w-full flex justify-between">
                            <div class="flex items-center gap-2 text-yellow-400">
                                <i class="fa-solid fa-star text-3xl"></i>
                                <p class="text-xl font-semibold font-serif">
                                    <span id="avg-rating">
                                        <%= formattedRating %>
                                    </span> / 5.0
                                </p>
                            </div>
                            <div class="flex items-center gap-2 text-yellow-400">
                                <i class="fa-solid fa-users text-lg"></i>
                                <p id="count-rating" class="text-xl font-semibold font-serif"><%= ratingCount %></p>
                            </div>
                        </div>
                        <div class="flex w-full items-start justify-between">
                            <div class="flex flex-col gap-2 items-center">
                                <div id="rating-container" class="flex items-center gap-2" data-user-id="<%= user && user.user_id ? user.user_id : '' %>">
                                    <i class="fa-solid fa-star text-[20px] cursor-pointer" data-rating="1"></i>
                                    <i class="fa-solid fa-star text-[24px] cursor-pointer" data-rating="2"></i>
                                    <i class="fa-solid fa-star text-[26px] cursor-pointer" data-rating="3"></i>
                                    <i class="fa-solid fa-star text-[28px] cursor-pointer" data-rating="4"></i>
                                    <i class="fa-solid fa-star text-[32px] cursor-pointer" data-rating="5"></i>
                                </div>

                                <div id="my-rating" class="text-2xl">
                                    <% if (user) { %> 
                                        <% let userRated = false; %>
                                        <% ratings.forEach(function(rating) { %>
                                            <% if (rating.user_id === user.user_id) { %>
                                                <p id="user-rating">
                                                    <%= rating.rating %>
                                                </p>
                                                <% userRated = true; %>
                                            <% } %>
                                        <% }); %>

                                        <% if (!userRated) { %>
                                            <p id="user-rating">0</p>
                                        <% } %>
                                    <% } else { %>
                                        <p class="text-2xl" id="user-rating">0</p>
                                    <% } %>
                                </div>
                            </div>

                            <div>
                                <i class="fas fa-heart text-3xl cursor-pointer transition-all duration-300 ease-in-out transform hover:text-red-600 hover:scale-110"></i>
                            </div>
                        </div>
                    </div>
                </div>
                <div class="w-full max-w-7xl mx-auto">
                    <div class="flex flex-col mb-6">
                        <h2 class="text-2xl font-semibold text-yellow-300 pb-4">Description</h2>
                        <p class="p-4 shadow bg-gradient-to-br from-gray-900 to-gray-500 border border-gray-700 border-l-yellow-500 border-l-2">
                            <%= movie.description %>
                        </p>
                    </div>
                    <div class="my-4 flex flex-gap-4 w-full">
                        <div class="flex w-full flex-col gap-4 my-4">
                            <label for="comment" class="font-semibold text-xl">Add Comment</label>
                            <div class="flex flex-col gap-4 w-1/2">
                                <input type="hidden" id="userId" value="<%= user && user.user_id || 'null' %>">
                                <input type="hidden" id="movieId" value="<%= movie.id %>">
                                <textarea name="comment" id="comment" placeholder="Add Comment....."
                                    class="border p-2 w-full rounded bg-gray-200 text-gray-900 placeholder-gray-500 
                                                            focus:outline-none focus:ring-2 focus:ring-yellow-500 focus:bg-white shadow-md resize-none overflow-y-auto h-full min-h-16 max-h-28"
                                    rows="1"></textarea>
                                <button id="submitComment"
                                    class="w-40 p-2 bg-gradient-to-t from-yellow-600 to-yellow-300 hover:from-yellow-500 hover:to-yellow-200 min-w-40 text-gray-800 font-bold rounded flex items-center justify-center">
                                    Submit
                                </button>
                            </div>
                        </div>
                    </div>
                    <h2 class="text-2xl font-semibold text-yellow-300 mb-4 border-b-2 border-yellow-300 pb-2">
                        "<%= movie.title %>" Reviews ( <%= commentCount %> )
                    </h2>
                    <div class="grid grid-cols-1 gap-6 w-full h-fit max-h-96 overflow-y-auto my-4 px-4 pr-8" id="newCommentSection"></div>
                    <div class="flex flex-col gap-2">
                        <div class="grid grid-cols-1 gap-6 w-full h-fit max-h-screen overflow-y-auto px-4">
                            <% if (comments.length===0) { %>
                            <p id="commentSectionError" class="text-gray-500 text-center mt-4 border p-4 border-gray-600">No comments yet. Be the first to comment!</p>
                            <% } else { %>
                                <% comments.forEach(comment=> { %>
                                    <div class="relative p-4 shadow border border-gray-700 border-l-yellow-500 border-l-2 max-w-full break-words">
                                        <div class="flex justify-between w-full items-center">
                                            <a href="#" class="text-yellow-300 font-bold hover:underline">
                                                <%= comment.user_name %>
                                            </a>
                                            <div>
                                                <p class="text-gray-200 mt-2">
                                                    <%= new Date(comment.created_at).toLocaleDateString() %>
                                                </p>
                                            </div>
                                        </div>
                                        <p class="text-gray-300 break-words">
                                            <%= comment.comment %>
                                        </p>
                                    </div>
                                <% }); %>
                            <% } %>
                        </div>
                        </div>
                    </div>
                </div>
            </div>
        </div>
    </div>
    </div>

    <script>
        document.addEventListener('DOMContentLoaded', () => {
            const stars = document.querySelectorAll('#rating-container i');
            let userRating = parseInt(document.getElementById('user-rating').innerText);

            function colorStars(rating) {
                stars.forEach((star, index) => {
                    if (index < rating) {
                        star.classList.add('text-yellow-500'); 
                        star.classList.remove('text-white'); 
                    } else {
                        star.classList.remove('text-yellow-500');
                        star.classList.add('text-white');
                    }
                });
            }

            function updateRatingDisplay(rating) {
                document.getElementById('user-rating').innerText = rating;
            }

            stars.forEach((star, index) => {
                star.addEventListener('mouseover', () => {
                    colorStars(index + 1);
                    updateRatingDisplay(index + 1); 
                });

                star.addEventListener('mouseout', () => {
                    colorStars(userRating);
                    updateRatingDisplay(userRating); 
                });

                star.addEventListener('click', () => {
                    userRating = index + 1; 
                    colorStars(userRating); 
                    updateRatingDisplay(userRating);
                });
            });

            colorStars(userRating);
            updateRatingDisplay(userRating);
        });
    </script>

    
    <script>
        const stars = document.querySelectorAll('.fa-star');
        const ratingElement = document.getElementById('user-rating');
        const initialRating = parseInt(ratingElement.innerText);
        document.addEventListener('DOMContentLoaded', async () => {
            try {
                const response = await fetch('/get-pending-rating');
                const data = await response.json();
                
                if (data.movieId && data.rating) {
                    console.log(`Pending Rating Found - Movie ID: ${data.movieId}, Rating: ${data.rating}`);
                    
                    const ratingContainer = document.getElementById('rating-container');
                    if (!ratingContainer) {
                        console.error("Error: Missing rating-container in the DOM.");
                        return;
                    }
                    const userId = ratingContainer.getAttribute('data-user-id');
                    
                    if (userId) {
                        await submitRating(userId, data.movieId, data.rating);
                        colorStars(data.rating);
                    } else {
                        console.warn("User is not logged in. Rating is saved but not submitted.");
                    }
                } else {
                    console.log('No pending rating found.');
                }
            } catch (error) {
                console.error('Error fetching pending rating:', error);
            }
        });

    
        function colorStars(rating) {
            stars.forEach((star, index) => {
                if (index <= rating) {
                    star.classList.add('text-yellow-500'); 
                    star.classList.remove('text-white'); 
                } else {
                    star.classList.remove('text-yellow-500');
                    star.classList.add('text-white');
                }
            });
        }

        async function submitRating(userId, movieId, rating) {
            try {
                const response = await fetch('/add_rating', {
                    method: 'POST',
                    headers: { 'Content-Type': 'application/json' },
                    body: JSON.stringify({ user_id: userId, movie_id: movieId, rating })
                });

                const result = await response.json();

                if (!response.ok) {
                    throw new Error(result.error || "Failed to submit rating.");
                }

                if (result.ratingCount) {
                    document.getElementById('count-rating').textContent = result.ratingCount;
                    document.getElementById('my-rating').innerText = rating;
                }

                console.log("Rating submitted successfully:", result.message);
            } catch (error) {
                console.error("Error:", error);
                alert('Error submitting rating');
            }
        }

        async function saveRatingBeforeLogin(movieId, rating) {
            if (!movieId || !rating) {
                console.error("Movie ID or rating is missing.");
                return;
            }

            try {
                const response = await fetch('/save-rating', {
                    method: 'POST',
                    headers: {
                        'Content-Type': 'application/json'
                    },
                    body: JSON.stringify({ movieId, rating })
                });

                if (response.ok) {
                    const data = await response.json();
                    console.log('Rating saved successfully:', data);
                    window.location.href = '/login';
                } else {
                    const errorData = await response.json();
                    console.error('Error saving rating:', errorData.message);
                }
            } catch (error) {
                console.error('Error during fetch:', error);
            }
        }

        document.addEventListener('DOMContentLoaded', () => {
            const ratingContainer = document.getElementById('rating-container');
            const movieContainer = document.getElementById('movie-container');

            if (!ratingContainer || !movieContainer) {
                console.error("Error: Missing rating-container or movie-container in the DOM.");
                return;
            }

            const userId = ratingContainer.getAttribute('data-user-id');
            const movieId = movieContainer.getAttribute('data-movie-id');

            stars.forEach(star => {
                star.addEventListener('click', async (event) => {
                    const rating = event.target.getAttribute('data-rating');
                    if (!userId) {
                        Swal.fire({
                            title: 'Login Required!',
                            text: 'You must be logged in to rate this movie.',
                            icon: 'warning',
                            showCancelButton: true,
                            confirmButtonText: 'Go to Login',
                            cancelButtonText: 'Cancel',
                            background: '#f2f2f2',
                            color: '#000',
                            customClass: {
                                popup: 'shadow-2xl rounded-xl p-6 border border-gray-800',
                                title: 'text-2xl font-bold text-gray-800',
                                htmlContainer: 'text-gray-800 text-lg',
                                icon: 'text-yellow-500',
                                confirmButton: 'bg-yellow-500 transition-all text-white font-semibold py-2 px-5 rounded-lg shadow-lg',
                                cancelButton: 'bg-red-600 hover:bg-red-700 transition-all text-white font-semibold py-2 px-5 rounded-lg shadow-md'
                            }
                        }).then((result) => {
                            if (result.isConfirmed) {
                                saveRatingBeforeLogin(movieId, rating);
                            } else {
                                const stars = document.querySelectorAll('.fa-star');
                                stars.forEach(star => {
                                    star.classList.remove('text-yellow-500');
                                    star.classList.add('text-gray-200');
                                });
                                ratingElement.innerText = "0";
                            }
                        });
                    }else{
                        try {
                            await submitRating(userId, movieId, rating);
                        } catch (error) {
                            console.error("Error submitting rating:", error);
                            alert("Failed to submit rating. Please try again later.");
                        }
                    }
                });
            });
        });
    
    </script>
</body>
</html>